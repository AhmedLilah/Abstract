// Abstract 


// Software 
//      LTR
















#import "Software/Basics.A"

// main function 
main :: () {
    print("Hello, World!");
}


















// Variable/Constant declaration.
identifier : |type| : value;

Pi :: 3.14; // f64 

counter : u8 : 255;


identifier : |type| = value;

area := Pi * 2.0; // f64
area = 0;

areaf32 : f32 = (Pi * 2.0) as f32; 

undeclVar : s64;

undeclVar = 100823;





// varialbe/constants packing/unpacking 
identifier := value, value; // packing 
identifier := (value1, value2); // tuple 


pos :: (40, 22);

x, y := pos;

x = 0234;
y = 489023;




// (bool, fileContent)


ok, fileContent := readFile("filepath.ext");


if ok {
    print("{fileContent}");
}


// nested packing/unpacking
// (bool, RGB, Encoding) 



ok, (R, G, B), encoding := calculationSomeColor();

if ok {
    print("R: {R}, G: {G}, B: {B}");
}













func :: () -> string, bool  {}




func(); // Error: ignored funtion return.


_ :: func();


fileData, _ := func();





















// function as first class objects.
func :: () -> () {
    ...
}

fun1 :: () -> () {
    ...
}


aliasToTheFunc := func;
aliasToTheFunc = fun1;




foreach :: (range : Range, operation : func) -> range : Range {

}



foreach({1, 2, 3}, func);




























s8, s16, s32, s64 // signed integers
u8, u16, u32, u64 // unsigned integers

f16, f32, f64, f80, f128 // floating point types


B\<n\>**, b8, b16, b32, b64, b128, b256, b512
	Binary bit vector.

bit
byte











arryOfInt8 : [10] s8;

bus8bit : [8] bit;





// binary digits syntax 
b8, b16

[8] bit, [16] bit;



// from software prespective
// procedure
binaryAnd :: (A : [8] bit, B : [8] bit) -> Y : b8 {
    Y = A & B;
    A = 0b0000111; // Error: input parameter can't be assigned 
    B = 0b0101010; // sucess.
}

// form hardware prespective 
fullAdder :: (A : [7] bit, B : [7] bit) -> Y : b8 {
    Y = A & B;
}



// in python 
def func (x, y, z) :
    pass
    
    

x := 0;
func(x = 32, z = 023, y =8239)



func :: (x : type = 0, y : type = 20, z : type= 40) {}
func :: (y : type = 0, z : type = vlue) 


func(5, 6, 5);

// calling function by named parameter in out of order sequence
func(.y = 10); // can't pick the correct function call.
func(_, .y = 10, _);
func(.x = _, .y = 10);

y := 23;
func(getXValueFromuser(), 23, 32);


// generic progamming 
add :: (lhs : _, rhs : _) -> result : _ {
    result = lhs + rhs;   
}  



// C

struct rgba {
    float r;
    float g;
    float b;
    float a;
}


rgba white {.r = 40, .b = 32};




// struct member proc

Color :: Struct {
    R, G, B : u8;
}


// should member functions by defaul pass a reference to the struct
Color.print :: () {

}

Color.print :: static () {

}

///////////////////////////////////////////

Color.print :: (.:.) {
    .R
}

// in rsut
Color.print :: (Sefl&) {

}



color := Color;

match color {
    .R == 5 => {}
    .G == 0 => {} 
}





















// input, output, inout
// passing type is compiler chosen unless otherwise declared
procedure :: (A : f16) -> B : output f32 {
    
}  